public class BinarySearchTree {
  
    private static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    private Node root; // Reference to the root of the binary search tree

     
    public BinarySearchTree() {
        root = null;
    }

  
    public void insert(int data) {
        root = insertRec(root, data);
    }

     
    private Node insertRec(Node root, int data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }
        if (data < root.data) {
            root.left = insertRec(root.left, data);
        } else if (data > root.data) {
            root.right = insertRec(root.right, data);
        }
        return root;
    }

 
    public void inorderTraversal() {
        inorderTraversalRec(root);
    }

    
    private void inorderTraversalRec(Node root) {
        if (root != null) {
            inorderTraversalRec(root.left);
            System.out.print(root.data + " ");
            inorderTraversalRec(root.right);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

         
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

  
        System.out.print("Inorder Traversal: ");
        bst.inorderTraversal(); // Output: 20 30 40 50 60 70 80
    }
}
